////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Copyright (C) 2021-2023 Crypto Lab Inc.                                    //
//                                                                            //
// - This file is part of HEaaN homomorphic encryption library.               //
// - HEaaN cannot be copied and/or distributed without the express permission //
//  of Crypto Lab Inc.                                                        //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Context.hpp"
#include "HEaaNExport.hpp"

namespace HEaaN {

class SecretKey;
class Message;
class Ciphertext;
class Plaintext;

///
///@brief Abstract entity for decrypting ciphertexts
///
class HEAAN_API Decryptor {
public:
    explicit Decryptor(const Context &context);

    ///@brief Decrypt a ciphertext to message using a secret key
    ///@param[in] ctxt
    ///@param[in] sk
    ///@param[out] msg
    void decrypt(const Ciphertext &ctxt, const SecretKey &sk,
                 Message &msg) const;

    ///@brief Decrypt a ciphertext to plaintext using a secret key
    ///@param[in] ctxt
    ///@param[in] sk
    ///@param[out] ptxt
    ///@details It sets the parameters of plaintext automatically. You may use
    /// any constructor of plaintext.
    void decrypt(const Ciphertext &ctxt, const SecretKey &sk,
                 Plaintext &ptxt) const;

    ///@brief Partially decrypt a ciphertext, which is encrypted with a
    /// collectively generated encryption key, to another ciphertext using a
    /// secret key, generated by one of the parties.
    ///@param[in] ctxt
    ///@param[in] sk
    ///@param[out] ctxt_out
    ///@details It sets the parameters of ciphertext automatically. You may
    /// use any constructor of ciphertext.
    /// ctxt should be encrypted with an encryption key which is generated by
    /// collective key generation. If ctxt is encrypted for the set of secret
    /// keys {sk_1 , ... , sk_n} and sk is one of the secret keys, ctxt_out is a
    /// ciphertext encrypted for the set of secret keys {sk_1, ... , sk_n} -
    /// {sk}. The parties of collective key generation may sequentially call
    /// `partialDecrypt` to decrypt the ciphertext. The last party may receive a
    /// ciphertext encrypted with a single sk_i, and call `decrypt` to get the
    /// decrypted plaintext.
    ///@throws RuntimeException if the size of input ciphertext is not 2.
    void partialDecrypt(const Ciphertext &ctxt, const SecretKey &sk,
                        Ciphertext &ctxt_out) const;

private:
    ///@brief A context with which decryptor is associated
    const Context context_;
};
} // namespace HEaaN
